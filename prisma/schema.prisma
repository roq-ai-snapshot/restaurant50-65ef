generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model feedback {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id   String     @db.Uuid
  restaurant_id String     @db.Uuid
  comment       String     @db.VarChar(255)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  user          user       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu_item {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String       @db.VarChar(255)
  price         Int
  restaurant_id String       @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
  restaurant    restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item    order_item[]
}

model order {
  id                             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id                    String       @db.Uuid
  wait_staff_id                  String       @db.Uuid
  status                         String       @db.VarChar(255)
  created_at                     DateTime     @default(now()) @db.Timestamp(6)
  updated_at                     DateTime     @default(now()) @db.Timestamp(6)
  user_order_customer_idTouser   user         @relation("order_customer_idTouser", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_order_wait_staff_idTouser user         @relation("order_wait_staff_idTouser", fields: [wait_staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_item                     order_item[]
}

model order_item {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id     String    @db.Uuid
  menu_item_id String    @db.Uuid
  quantity     Int
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  menu_item    menu_item @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order        order     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id   String     @db.Uuid
  restaurant_id String     @db.Uuid
  date_time     DateTime   @db.Timestamp(6)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  user          user       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description      String?            @db.VarChar(255)
  image            String?            @db.VarChar(255)
  name             String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  user_id          String             @db.Uuid
  tenant_id        String             @db.VarChar(255)
  feedback         feedback[]
  menu_item        menu_item[]
  reservation      reservation[]
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant_table restaurant_table[]
}

model restaurant_table {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id String       @db.Uuid
  status_id     String       @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
  restaurant    restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  table_status  table_status @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model table_status {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status           String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  restaurant_table restaurant_table[]
}

model user {
  id                              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String        @unique @db.VarChar(255)
  firstName                       String?       @db.VarChar(255)
  lastName                        String?       @db.VarChar(255)
  roq_user_id                     String        @db.VarChar(255)
  tenant_id                       String        @db.VarChar(255)
  created_at                      DateTime      @default(now()) @db.Timestamp(6)
  updated_at                      DateTime      @default(now()) @db.Timestamp(6)
  feedback                        feedback[]
  order_order_customer_idTouser   order[]       @relation("order_customer_idTouser")
  order_order_wait_staff_idTouser order[]       @relation("order_wait_staff_idTouser")
  reservation                     reservation[]
  restaurant                      restaurant[]
}
